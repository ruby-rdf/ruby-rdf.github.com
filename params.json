{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Main page for ruby-rdf","name":"Ruby-rdf.github.com","google":"","body":"Linked Data for Ruby\r\n====================\r\n\r\nThis is the home of Ruby RDF. This project collects numerous gems supporting Linked Data and Semantic Web programming in Ruby.\r\n\r\nThe primary gem is [RDF.rb](http://ruby-rdf.github.com/rdf), which contains the core algorithms and classes used for doing basic programming of [RDF][], including support for `Repositories`, `Graphs`, `Statements`, `URIs`, `Literals`, and `BNodes`.\r\n\r\nThe Ruby RDF account also collects numerous gems used for reading and writing different RDF formats. At present, this includes the following:\r\n\r\n* [N-Triples][] (through [RDF.rb][])\r\n* [N-Quads][] (through [RDF.rb][])\r\n* [Turtle][] (through [RDF::Turtle][] and [RDF::Raptor][]),\r\n* [Notation3][] (through [RDF::N3][]),\r\n* [RDFa][] (through [RDF::RDFa][] and [RDF::Raptor][]),\r\n* [Microdata][] (through [RDF::Microdata][]),\r\n* [RDF/XML][] (through [RDF::RDFXML][] and [RDF::Raptor][]),\r\n* [RDF/JSON][] (through [RDF::JSON]),\r\n* [JSON-LD][] (through [JSON::LD])\r\n\r\nIn addition to basic Query mechanisms\r\n\r\n* [RDF::Isomorphic][],\r\n* [SPARQL::Client][],\r\n* [SPARQL][].\r\n\r\nThere are also storage adaptors for popular Triple-stores, Graph-stores SQL, and other NOSQL stores.\r\n\r\n * [RDF::DO][],\r\n * [RDF::Mongo][],\r\n * [RDF::Sesame][]\r\n\r\nThere is also a [LinkedData][] gem, which combines a core set of these together.\r\n\r\n## Examples\r\n\r\n    require 'linkeddata'\r\n\r\n### Writing RDF data using the N-Triples format\r\n\r\n    require 'rdf/ntriples'\r\n    graph = RDF::Graph.new << [:hello, RDF::DC.title, \"Hello, world!\"]\r\n    graph.dump(:ntriples)\r\n    \r\nor\r\n\r\n    RDF::Writer.open(\"hello.nt\") { |writer| writer << graph }\r\n\r\n### Reading RDF data in the N-Triples format\r\n\r\n    require 'rdf/ntriples'\r\n    graph = RDF::Graph.load(\"http://ruby-rdf.github.com/rdf/etc/doap.nt\")\r\n    \r\nor\r\n\r\n    RDF::Reader.open(\"http://ruby-rdf.github.com/rdf/etc/doap.nt\") do |reader|\r\n      reader.each_statement do |statement|\r\n        puts statement.inspect\r\n      end\r\n    end\r\n\r\n### Reading RDF data in other formats\r\n{RDF::Reader.open} and {RDF::Repository.load} use a number of mechanisms to determine the appropriate reader\r\nto use when loading a file. The specific format to use can be forced using, e.g. `:format => :ntriples`\r\noption where the specific format symbol is determined by the available readers. Both also use\r\nMimeType or file extension, where available.\r\n\r\n    require 'linkeddata'\r\n    \r\n    repo = RDF::Repository.load(\"http://ruby-rdf.github.com/rdf-turtle/etc/doap.ttl\")\r\n\r\nA specific sub-type of Reader can also be invoked directly:\r\n\r\n    require 'rdf/turtle'\r\n    \r\n    RDF::Reader.open(\"http://ruby-rdf.github.com/rdf-turtle/etc/doap.ttl\") do |reader|\r\n      reader.each_statement do |statement|\r\n        puts statement.inspect\r\n      end\r\n    end\r\n\r\n### Writing RDF data using other formats\r\n`RDF::Writer.open`, `RDF::Enumerable#dump`, `RDF::Writer.dump` take similar options to `RDF::Reader.open` to determine the\r\nappropriate writer to use.\r\n\r\n    require 'linkeddata'\r\n\r\n    RDF::NTriples::Writer.open(\"doap.nt\") do |writer|\r\n      writer << RDF::Reader.open(\"http://ruby-rdf.github.com/rdf/etc/doap.nt\")\r\n    end\r\n\r\nA specific sub-type of Writer can also be invoked directly:\r\n\r\n    require 'rdf/nquads'\r\n\r\n    graph.dump(:nquads)\r\n\r\n### Querying RDF data using basic graph patterns (BGPs)\r\n\r\n    require 'rdf/nquads'\r\n    \r\n    repo = RDF::Repository.load(\"http://ruby-rdf.github.com/rdf/etc/doap.nq\")\r\n    query = RDF::Query.new({\r\n      :person => {\r\n        RDF.type  => RDF::FOAF.Person,\r\n        RDF::FOAF.name => :name,\r\n        RDF::FOAF.mbox => :email,\r\n      }\r\n    })\r\n    \r\n    query.execute(repo).each do |solution|\r\n      puts \"name=#{solution.name} email=#{solution.email}\"\r\n    end\r\n\r\nA separate [SPARQL][SPARQL doc] gem builds on basic BGP support to provide full support for [SPARQL 1.0](http://www.w3.org/TR/rdf-sparql-query/) queries.\r\n\r\n### Using pre-defined RDF vocabularies\r\n\r\n    DC.title      #=> RDF::URI(\"http://purl.org/dc/terms/title\")\r\n    FOAF.knows    #=> RDF::URI(\"http://xmlns.com/foaf/0.1/knows\")\r\n    RDF.type      #=> RDF::URI(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\")\r\n    RDFS.seeAlso  #=> RDF::URI(\"http://www.w3.org/2000/01/rdf-schema#seeAlso\")\r\n    RSS.title     #=> RDF::URI(\"http://purl.org/rss/1.0/title\")\r\n    OWL.sameAs    #=> RDF::URI(\"http://www.w3.org/2002/07/owl#sameAs\")\r\n    XSD.dateTime  #=> RDF::URI(\"http://www.w3.org/2001/XMLSchema#dateTime\")\r\n\r\n### Using ad-hoc RDF vocabularies\r\n\r\n    foaf = RDF::Vocabulary.new(\"http://xmlns.com/foaf/0.1/\")\r\n    foaf.knows    #=> RDF::URI(\"http://xmlns.com/foaf/0.1/knows\")\r\n    foaf[:name]   #=> RDF::URI(\"http://xmlns.com/foaf/0.1/name\")\r\n    foaf['mbox']  #=> RDF::URI(\"http://xmlns.com/foaf/0.1/mbox\")\r\n\r\n[RDF.rb]:         http://ruby-rdf.github.com/rdf\r\n[RDF::DO]:        http://ruby-rdf.github.com/rdf-do\r\n[RDF::Mongo]:     http://ruby-rdf.github.com/rdf-mongo\r\n[RDF::Sesame]:    http://ruby-rdf.github.com/rdf-sesame\r\n[RDF::JSON]:      http://ruby-rdf.github.com/rdf-json\r\n[RDF::Microdata]: http://ruby-rdf.github.com/rdf-microdata\r\n[RDF::N3]:        http://ruby-rdf.github.com/rdf-n3\r\n[RDF::RDFa]:      http://ruby-rdf.github.com/rdf-rdfa\r\n[RDF::RDFXML]:    http://ruby-rdf.github.com/rdf-rdfxml\r\n[RDF::TriX]:      http://ruby-rdf.github.com/rdf-trix\r\n[RDF::Turtle]:    http://ruby-rdf.github.com/rdf-turtle\r\n[RDF::Raptor]:    http://ruby-rdf.github.com/rdf-raptor\r\n[LinkedData]:     http://ruby-rdf.github.com/linkeddata\r\n[JSON::LD]:       http://gkellogg.github.com/json-ld\r\n[SPARQL gem]:     http://ruby-rdf.github.com/sparql\r\n[SPARQL::Client]: http://ruby-rdf.github.com/sparql-client\r\n[JSON-LD]:        http://json-ld.org/\r\n[Linked Data]:    http://linkeddata.org/\r\n[Microdata]:      http://en.wikipedia.org/wiki/Microdata_(HTML)\r\n[N-Quads]:        http://sw.deri.org/2008/07/n-quads/\r\n[N-Triples]:      http://en.wikipedia.org/wiki/N-Triples\r\n[Notation3]:      http://en.wikipedia.org/wiki/Notation3\r\n[RDF/JSON]:       http://n2.talis.com/wiki/RDF_JSON_Specification\r\n[RDF/XML]:        http://en.wikipedia.org/wiki/RDF/XML\r\n[RDFa]:           http://en.wikipedia.org/wiki/RDFa\r\n[Raptor]:         http://en.wikipedia.org/wiki/Redland_RDF_Application_Framework\r\n[SPARQL]:         http://en.wikipedia.org/wiki/Sparql\r\n[TriX]:           http://www.w3.org/2004/03/trix/\r\n[Turtle]:         http://www.w3.org/TR/turtle/\r\n[versioning]:     http://blog.zenspider.com/2008/10/rubygems-howto-preventing-cata.html\r\n"}